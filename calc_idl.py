# Python stubs generated by omniidl from calc.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


#
# Start of module "Calculator"
#
__name__ = "Calculator"
_0_Calculator = omniORB.openModule("Calculator", r"calc.idl")
_0_Calculator__POA = omniORB.openModule("Calculator__POA", r"calc.idl")


# interface Calc
_0_Calculator._d_Calc = (omniORB.tcInternal.tv_objref, "IDL:Calculator/Calc:1.0", "Calc")
omniORB.typeMapping["IDL:Calculator/Calc:1.0"] = _0_Calculator._d_Calc
_0_Calculator.Calc = omniORB.newEmptyClass()
class Calc :
    _NP_RepositoryId = _0_Calculator._d_Calc[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Calculator.Calc = Calc
_0_Calculator._tc_Calc = omniORB.tcInternal.createTypeCode(_0_Calculator._d_Calc)
omniORB.registerType(Calc._NP_RepositoryId, _0_Calculator._d_Calc, _0_Calculator._tc_Calc)

# Calc operations and attributes
Calc._d_sum = ((omniORB.tcInternal.tv_float, omniORB.tcInternal.tv_float), (omniORB.tcInternal.tv_float, ), None)
Calc._d_subtract = ((omniORB.tcInternal.tv_float, omniORB.tcInternal.tv_float), (omniORB.tcInternal.tv_float, ), None)
Calc._d_multiply = ((omniORB.tcInternal.tv_float, omniORB.tcInternal.tv_float), (omniORB.tcInternal.tv_float, ), None)
Calc._d_divide = ((omniORB.tcInternal.tv_float, omniORB.tcInternal.tv_float), (omniORB.tcInternal.tv_float, ), None)

# Calc object reference
class _objref_Calc (CORBA.Object):
    _NP_RepositoryId = Calc._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def sum(self, *args):
        return self._obj.invoke("sum", _0_Calculator.Calc._d_sum, args)

    def subtract(self, *args):
        return self._obj.invoke("subtract", _0_Calculator.Calc._d_subtract, args)

    def multiply(self, *args):
        return self._obj.invoke("multiply", _0_Calculator.Calc._d_multiply, args)

    def divide(self, *args):
        return self._obj.invoke("divide", _0_Calculator.Calc._d_divide, args)

omniORB.registerObjref(Calc._NP_RepositoryId, _objref_Calc)
_0_Calculator._objref_Calc = _objref_Calc
del Calc, _objref_Calc

# Calc skeleton
__name__ = "Calculator__POA"
class Calc (PortableServer.Servant):
    _NP_RepositoryId = _0_Calculator.Calc._NP_RepositoryId


    _omni_op_d = {"sum": _0_Calculator.Calc._d_sum, "subtract": _0_Calculator.Calc._d_subtract, "multiply": _0_Calculator.Calc._d_multiply, "divide": _0_Calculator.Calc._d_divide}

Calc._omni_skeleton = Calc
_0_Calculator__POA.Calc = Calc
omniORB.registerSkeleton(Calc._NP_RepositoryId, Calc)
del Calc
__name__ = "Calculator"

#
# End of module "Calculator"
#
__name__ = "calc_idl"

_exported_modules = ( "Calculator", )

# The end.
